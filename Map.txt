Map Interface
    - struktur data Collection yang berisikan mapping antara key dan value
    - dimana key itu harus unik, tidak boleh duplikat, dan satu key cuma boleh mapping ke satu value
    - Map sebenarnya mirip dengan array, cuma bedanya kalo di array key nya adalah index(integer) sedangkan di map keynya bebas kita tentukan

    - implementasi Map
        - Map
            - HashMap
            - WeakHashMap
            - IdentityHashMap
            - LinkedHashMap
            - EnumHashMap

    - HashMap
        - HashMap adalah implementasi Map yang melakukan distribusi key menggunakan hashCode() function
        - Karena HashMap sangat bergantung dengan hashCode() function, jadi pastikan kita harus membuat function hashCode seunik mungkin, karena jika terlalu banyak nilai hashCode() yang sama maka pendistribusian key nya tidak akan optimal sehingga proses get data di Map akan semakin lambat
        - di HashMap pengecekan data dupilikat dilakukan dengan menggunakan method equals nya.

        - Code : HashMap
            Map<String, String> map = new HashMap<>();
            map.put("firstName","Gojo");
            map.put("lastName","Satoru");

            System.out.println(map.get("firstName"));
            System.out.println(map.get("lastName"));

        - result :
            Gojo
            Satoru

    - WeakHashMap
        - WeakHashMap adalah implementasi Map mirip dengan HashMap
        - Yang membedakan adalah WeakHashMap menggunakan weak key, dimana jika lama tidak digunakan secara otomatis data WeakHashMap akan dihapus
        - jika terjadi garbage collection di java, bisa dimungkinkan data di WeakHashMap akan dihapus
        - WeakHashMap cocok digunakan untuk menyimpan data cache di memory secara sementara

        - Code : WeakHashMap
            Map<Integer, Integer> map =  new WeakHashMap<>();
            for(int i = 0; i < 1_000_000; i++){
                map.put(i,i);
            }

            System.gc();

            System.out.println(map, size());

        - result
            < 1000000
    
    - IdentityHashMap
        - IdentityHashMap mirip seperti HashMap
        - yang membedakan adalah cara pengecekan kesamaan datanya, tidak menggunakan function equals, melainkan menggunaka operator == (reference equality)
        - artinya data dianggap sama, jika memang lokasi di memory tersebut sama

        - Code : IdentityHashMap
            String key1 = "name.first";

            String name = "name";
            String first = "first";

            String key2 = name +"."+first;

            Map<String, String> map = new IdentityHashMap<>();
            map.put(key1, "Gojo Satoru");
            map.put(key2, "Gojo Satoru");

            System.out.println(key1.equals(key2));
            System.out.println(key1 == key2);

            System.out.println(map.sze());

        - result :
            true
            false
            2

    - LinkedHashMap
        - LinkedHashMap merupakan implementasi Map menggunakan double linked list
        - data di LinkedHashMap akan lebih terprediksi karena datanya akan disimpan berurutan dalam linked list sesuai urutan kita menimpan data
        - namun perlu diperhatikan untuk proses get data di LinkedHashMap akan semakin lambat karena harus melakukan iterasi data LinkedList terlebih dahulu
        - gunakan LinkedHashMap jika memang kita lebh mementingkan iterasi data Map nya

        - Code : LinkedHashMap
            Map<String, String> map = new LinkedHashMap<>();
            map.put("Gojo","Gojo");
            map.put("Satoru","Satoru");
            map.put("Strongest","Strongest")

            for (var key : map.keySet()){
                System.out.println(key);
            }

        - result :
            Gojo
            Satoru
            Strongest

    - EnumMap
        -EnumMap adalah implementasi Map dimana key nya dalah Enum
        - karena data enum sudah pasti unik, oleh karena iu cocok untuk dijadikan key di Map
        - algoritma pendistribusian key dioptimalkan untuk enum, sehingga lebih optimal dibandingkan menggunakan hashCode() method

        - Code : EnumMap

            public static enum Level{
                FREE, STANDARD, PREMIUM, VIP
            }

            public static void main(String[] args){
                EnumMap<Level, String> map = new EnumHashMap<>();
                map.put(Level.FREE, "Gratis");
                map.put(Level.PREMIUM,"Paid");

                System.out.println(map.get(Level.FREE));
                System.out.println(map.get(Level.PREMIUM));
            }

        - result :
            Gratis
            Paid

    - Immutable Map
        - Collections.emptyMap()
        - Collections.unmodifiableMap(map)
        - Collections.singletonMap(key, value)
        - Map.of(...)

    - SortedMap
        - SortedMap adalah implementasi Map dengan data key diurutkan sesuai dengan Comparable key ayau bisa menggunakan Comparator
        - SortedMap cocok untuk kasus yang posisi key pada Map harus berurut

        - implementasi SortedMap
            - Map
                - SortedMap
                    - TreeMap (Class)

        - Code : SortedMap

            Comparator<String> stringComparator = new Comparator<String>(){
                @Override
                public int compare(String o1, String o2){
                    return o2.compareTo(o1);
                }
            }

            SortedMap<String, String> map = new TreeMap<>(stringComparator);
            map.put("Gojo","Gojo");
            map.put("Satoru","Satoru");
            map.put("Strongest","Strongest");

            for(var key : map.entrySet()){
                System.out.println(key);
            }

        - result :

            Strongest
            Satoru
            Gojo

        - Immutable SortedMap
            - Collections.emptySortedMap()
            - Collection.unmodifiableSortedMap(map)

    - NavigableMap
        - NavigableMap adalah turunan dari SortedMap
        - namun NavigableMap memiliki kemampuan navigasi berdasarkan operasi kurang dari lebih dari dan sejenisnya
        - misal kita ingin mengambil data yang lebih dari key x atau kurang dari key y, ini bisa dilakukan di NavigableMap


        - implementasi NavigableMap
            -Map
                -SortedMap
                    -NavigableMap
                        -TreeMap

        - Code : NavigableMap

            NavigableMap<String, String> map =  new TreeMap<>();

            map.put("Gojo","Gojo");
            map.put("Amaterasu","Amaterasu");
            map.put("Strongest","Strongest");

            System.out.println(map.lowerKey("Gojo"));
            System.out.println(map.higherKey("Gojo"));

        - result : 

            Amaterasu
            Strongest

        - Immutable NavigableMap
            - Collections.emptyNavigableMap()
            - Collections.unmodifiableNavigableMap(map)

    - Entry-Map
        - saat kita menyimpan data di Map, data disimpan dalam pair(key-value)
        - di java collection, implementasi Pair di Map bernama Entry
        - Entry adalah Interface sederhana yang berisikan method untuk mengambil key dan value

        Code : Entry

            Map<String, String> map = new HashMap<>();
            map.put("Gojo","Gojo");
            map.put("Geto","Geto");
            map.put("Shoko","Shoko");

            Set<Map.Entry<String, String>> entries = map.entrySet();

            for(var entry : entries){
                System.out.println("===");
                System.out.println("Key :"+entry.getKey());
                System.out.println("Value :"+entry.getValue());
            }